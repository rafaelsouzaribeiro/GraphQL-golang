package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"

	"github.com/rafaelsouzaribeiro/13-graphql/graph/model"
)

// Courses is the resolver for the courses field.
func (r *categoryResolver) Courses(ctx context.Context, obj *model.Category) ([]*model.Course, error) {
	courses, err := r.CouseDB.FindByCategoryID(obj.ID)

	if err != nil {
		return nil, err
	}

	var CoursesModel []*model.Course

	for _, v := range courses {
		CoursesModel = append(CoursesModel, &model.Course{ID: v.ID, Name: v.Name, Description: &v.Description})
	}

	return CoursesModel, nil
}

// Category is the resolver for the category field.
func (r *courseResolver) Category(ctx context.Context, obj *model.Course) (*model.Category, error) {
	category, err := r.CategoryDB.FindByCourseID(obj.ID)

	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          category.ID,
		Name:        category.Name,
		Description: category.Description,
	}, nil
}

// CrateCategory is the resolver for the crateCategory field.
func (r *mutationResolver) CrateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	catetory, err := r.CategoryDB.Create(input.Name, *input.Description)

	if err != nil {
		return nil, err
	}

	return &model.Category{
		Name:        catetory.Name,
		Description: catetory.Description,
		ID:          catetory.ID,
	}, nil
}

// CrateCourse is the resolver for the crateCourse field.
func (r *mutationResolver) CrateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	courses, err := r.CouseDB.Create(input.Name, *input.Description, input.CategoryID)

	if err != nil {
		return nil, err
	}

	return &model.Course{
		ID:          courses.ID,
		Name:        courses.Name,
		Description: &courses.Description,
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryDB.FindAll()

	if err != nil {
		return nil, err
	}

	var categoriesModel []*model.Category

	for _, v := range categories {
		categoriesModel = append(categoriesModel, &model.Category{ID: v.ID, Name: v.Name, Description: v.Description})
	}

	return categoriesModel, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	courses, err := r.CouseDB.FindAll()

	if err != nil {
		return nil, err
	}

	var coursesModel []*model.Course

	for _, v := range courses {
		coursesModel = append(coursesModel, &model.Course{ID: v.ID, Name: v.Name,
			Description: &v.Description})
	}

	return coursesModel, nil
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
